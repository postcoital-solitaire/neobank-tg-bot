from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton

from content import CURRENCY
from filters.filter import IsTextFilter, TypicalFilter
from main import api
from models.models import TransferStates

router = Router()
router.message.filter(IsTextFilter())


@router.message(TypicalFilter(for_replace=["/transfers", "–ü–µ—Ä–µ–≤–æ–¥—ã"]))
async def transfers_start(message: Message, state: FSMContext):
    token = api.try_get_token(message.chat.id)
    accounts = await api.get_accounts(token)

    if not accounts or len(accounts) < 2:
        return await message.answer("–î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º –¥–≤–∞ —Å—á—ë—Ç–∞.")

    await state.update_data(accounts=accounts)
    await state.set_state(TransferStates.choosing_from_account)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=f"{a.account_number} ({a.amount} {CURRENCY.get(a.currency_number)[-1]})",
                callback_data=f"from_{i}"
            )] for i, a in enumerate(accounts)
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—á—ë—Ç, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞:", reply_markup=keyboard)


@router.callback_query(F.data.startswith("from_"))
async def choose_from_account(call: CallbackQuery, state: FSMContext):
    index = int(call.data.replace("from_", ""))
    data = await state.get_data()
    accounts = data["accounts"]
    from_account = accounts[index]

    to_accounts = [a for i, a in enumerate(accounts) if i != index]
    await state.update_data(from_account=from_account, to_accounts=to_accounts)
    await state.set_state(TransferStates.choosing_to_account)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=f"{a.account_number} ({a.amount} {CURRENCY.get(a.currency_number)[-1]})",
                callback_data=f"to_{i}"
            )] for i, a in enumerate(to_accounts)
        ]
    )

    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—á—ë—Ç –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è:", reply_markup=keyboard)


@router.callback_query(F.data.startswith("to_"))
async def choose_to_account(call: CallbackQuery, state: FSMContext):
    index = int(call.data.replace("to_", ""))
    data = await state.get_data()

    from_account = data["from_account"]
    to_account = data["to_accounts"][index]

    await state.update_data(to_account=to_account)
    await state.set_state(TransferStates.entering_amount)

    from_currency = CURRENCY.get(from_account.currency_number)[-1]
    to_currency = CURRENCY.get(to_account.currency_number)[-1]

    await call.message.edit_text(
        f"<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–µ—Ä–µ–≤–æ–¥:</b>\n\n"
        f"üí≥ –°—á—ë—Ç —Å–ø–∏—Å–∞–Ω–∏—è:\n"
        f"‚Ä¢ –ù–æ–º–µ—Ä: <code>{from_account.account_number}</code>\n"
        f"‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫: {from_account.available_amount:.2f} / {from_account.amount:.2f} {from_currency}\n\n"
        f"üè¶ –°—á—ë—Ç –∑–∞—á–∏—Å–ª–µ–Ω–∏—è:\n"
        f"‚Ä¢ –ù–æ–º–µ—Ä: <code>{to_account.account_number}</code>\n"
        f"‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫: {to_account.available_amount:.2f} / {to_account.amount:.2f} {to_currency}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞:",
        parse_mode="HTML"
    )



@router.message(TransferStates.entering_amount)
async def enter_transfer_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(",", "."))
        if amount <= 0:
            raise ValueError()
    except ValueError:
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")

    await state.update_data(amount=amount)
    data = await state.get_data()

    from_acc = data["from_account"]
    to_acc = data["to_account"]
    currency_sign = CURRENCY.get(from_acc.currency_number)[-1]

    await state.set_state(TransferStates.confirming_transfer)
    await message.answer(
        f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ {amount:.2f} {currency_sign} —Å {from_acc.account_number} –Ω–∞ {to_acc.account_number}?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_transfer")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_transfer")]
        ])
    )


@router.callback_query(F.data == "confirm_transfer")
async def confirm_transfer(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    token = api.try_get_token(call.message.chat.id)

    result = await api.transfer_funds(
        token=token,
        from_account_id=data["from_account"].id,
        to_account_id=data["to_account"].id,
        amount=data["amount"]
    )

    await call.message.edit_text("‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω." if result else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥.")
    await state.clear()


@router.callback_query(F.data == "cancel_transfer")
async def cancel_transfer(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text("‚ùå –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.")
