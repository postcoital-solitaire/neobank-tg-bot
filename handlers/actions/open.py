from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message

from content import get_currency_symbol, DEPOSIT_OPTIONS
from filters.filter import IsTextFilter
from main import api
from models.models import OpenStates
from content import CURRENCY

router = Router()
router.message.filter(IsTextFilter())

@router.callback_query(F.data.startswith("open_"))
async def handle_open_action(call: CallbackQuery, state: FSMContext):
    _, product_type = call.data.split("_", 1)

    token = api.try_get_token(call.message.chat.id)
    if not token:
        await call.answer("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
        return

    if product_type == "account":
        await handle_open_account(call, state)
    elif product_type == "deposit":
        await handle_open_deposit(call, state)
    elif product_type == "credit":
        await handle_open_credit(call, state)


async def handle_open_account(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–æ–≤–æ–≥–æ —Å—á–µ—Ç–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{currency[0]} ({currency[1]})", callback_data=f"op_acc_cur:{code}")]
        for code, currency in CURRENCY.items()
    ])

    await call.message.edit_text(
        "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—á–µ—Ç–∞:",
        reply_markup=keyboard
    )


@router.callback_query(F.data.startswith("op_acc_cur:"))
async def handle_account_currency_selection(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã –¥–ª—è —Å—á–µ—Ç–∞"""
    currency_code = int(call.data.split(":")[1])
    await state.update_data(currency=currency_code)

    await call.message.edit_text(
        f"üí≥ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—á–µ—Ç–∞ –≤ {get_currency_symbol(currency_code)}:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel:account")]
        ])
    )
    await call.answer()
    await state.set_state(OpenStates.waiting_for_account_amount)


@router.message(OpenStates.waiting_for_account_amount)
async def handle_account_amount_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—á–µ—Ç–∞"""
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
        return

    data = await state.get_data()
    currency_code = data["currency"]

    token = api.try_get_token(message.chat.id)
    if not token:
        await message.answer("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
        return

    try:
        account = await api.open_account(token, currency_code, amount)
        await message.answer(
            f"‚úÖ –°—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç!\n"
            f"–ù–æ–º–µ—Ä: <code>{account.account_number}</code>\n"
            f"–°—É–º–º–∞: {amount:.2f} {get_currency_symbol(currency_code)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚Üê –ö —Å–ø–∏—Å–∫—É —Å—á–µ—Ç–æ–≤", callback_data="list:account")]
                ]
            ),
            parse_mode="HTML"
        )
        await state.clear()
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—á–µ—Ç–∞: {str(e)}")


async def handle_open_deposit(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–æ–≤–æ–≥–æ –≤–∫–ª–∞–¥–∞"""
    token = api.try_get_token(call.message.chat.id)
    if not token:
        await call.answer("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
        return

    accounts = await api.get_accounts(token)
    rub_accounts = [acc for acc in accounts if acc.book == 0 and acc.status == "ACTIVE" and acc.currency_number == 643]

    if not rub_accounts:
        await call.message.edit_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä—É–±–ª–µ–≤—ã—Ö —Å—á–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–∫–ª–∞–¥–∞",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="list:deposit")]
            ]
            )
        )
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"{acc.account_number} ({acc.amount:.2f} {get_currency_symbol(acc.currency_number)})",
            callback_data=f"select_deposit_account:{acc.id}"
        )] for acc in rub_accounts
    ])

    await call.message.edit_text(
        "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–∫–ª–∞–¥–∞:",
        reply_markup=keyboard
    )
    await state.set_state(OpenStates.waiting_for_deposit_account)


@router.callback_query(F.data.startswith("select_deposit_account:"), OpenStates.waiting_for_deposit_account)
async def handle_deposit_account_selection(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—á–µ—Ç–∞ –¥–ª—è –≤–∫–ª–∞–¥–∞"""
    account_id = call.data.split(":")[1]
    await state.update_data(account_id=account_id)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–≤
    deposit_options = DEPOSIT_OPTIONS

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=name, callback_data=f"select_deposit_type:{name}")]
        for name in deposit_options.keys()
    ])

    await call.message.edit_text(
        "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∫–ª–∞–¥–∞:",
        reply_markup=keyboard
    )
    await state.set_state(OpenStates.waiting_for_deposit_type)


@router.callback_query(F.data.startswith("select_deposit_type:"), OpenStates.waiting_for_deposit_type)
async def handle_deposit_type_selection(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≤–∫–ª–∞–¥–∞"""
    deposit_type = call.data.split(":")[1]
    options = DEPOSIT_OPTIONS.get(deposit_type, {})

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"{name}",
            callback_data=f"sel_dep_opt:{deposit_type}:{name}"
        )] for name, opt in options.items()
    ])

    await call.message.edit_text(
        f"üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –≤–∫–ª–∞–¥–∞ '{deposit_type}':",
        reply_markup=keyboard
    )
    await state.set_state(OpenStates.waiting_for_deposit_option)


@router.callback_query(F.data.startswith("sel_dep_opt:"), OpenStates.waiting_for_deposit_option)
async def handle_deposit_option_selection(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏ –≤–∫–ª–∞–¥–∞"""
    _, deposit_type, option_name, percent = call.data.split(":")
    option_name = option_name + ":" + percent

    option = DEPOSIT_OPTIONS[deposit_type][option_name]

    await state.update_data(
        deposit_type=deposit_type,
        option_name=option_name,
        option=option
    )

    await call.message.edit_text(
        f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–∫–ª–∞–¥–∞\n"
        f"<b>'{deposit_type} - {option_name}'</b>:\n"
        f"<i>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {30000}‚ÇΩ </i>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel:deposit")]
        ]),
        parse_mode="HTML"
    )
    await state.set_state(OpenStates.waiting_for_deposit_amount)


@router.message(OpenStates.waiting_for_deposit_amount)
async def handle_deposit_amount_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–ª—è –≤–∫–ª–∞–¥–∞"""
    try:
        amount = float(message.text)
        data = await state.get_data()
        min_amount = data["option"].get("min_amount", 0)

        if amount < min_amount:
            await message.answer(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è —ç—Ç–æ–≥–æ –≤–∫–ª–∞–¥–∞: {min_amount:.2f} ‚ÇΩ")
            return
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
        return

    token = api.try_get_token(message.chat.id)
    if not token:
        await message.answer("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
        return

    data = await state.get_data()

    try:
        deposit = await api.open_deposit_with_option(
            token=token,
            account_id=data["account_id"],
            product_name=data["deposit_type"],
            option_name=data["option_name"],
            amount=amount,
            auto_prolongation=True
        )

        await message.answer(
            f"‚úÖ –í–∫–ª–∞–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç!\n"
            f"–ù–æ–º–µ—Ä: {deposit.number}\n"
            f"–°—É–º–º–∞: {amount:.2f} ‚ÇΩ\n"
            f"–°—Ç–∞–≤–∫–∞: {deposit.rate}%\n"
            f"–°—Ä–æ–∫: {deposit.period} –º–µ—Å.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚Üê –ö —Å–ø–∏—Å–∫—É –≤–∫–ª–∞–¥–æ–≤", callback_data="list:deposit")]
            ])
        )
        await state.clear()
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≤–∫–ª–∞–¥–∞: {str(e)}")


async def handle_open_credit(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–æ–≤–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–∞"""
    token = api.try_get_token(call.message.chat.id)
    if not token:
        await call.answer("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    try:
        products = await api.get_credit_products(token)
        if not products:
            await call.message.edit_text(
                "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="list:credit")]
                ])
            )
            return

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=prod["name"], callback_data=f"select_credit_product:{prod['id']}")]
            for prod in products
        ])

        await call.message.edit_text(
            "üíµ –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç:",
            reply_markup=keyboard
        )
        await state.set_state(OpenStates.waiting_for_credit_product)
    except Exception as e:
        await call.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {str(e)}")


@router.callback_query(F.data.startswith("select_credit_product:"), OpenStates.waiting_for_credit_product)
async def handle_credit_product_selection(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    product_id = call.data.split(":")[1]
    await state.update_data(product_id=product_id)

    await call.message.edit_text(
        "üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel:credit")]
        ])
    )
    await state.set_state(OpenStates.waiting_for_credit_amount)


@router.message(OpenStates.waiting_for_credit_amount)
async def handle_credit_amount_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –∫—Ä–µ–¥–∏—Ç–∞"""
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
        return

    await state.update_data(amount=amount)

    await message.answer(
        "üíµ –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ (–≤ –º–µ—Å—è—Ü–∞—Ö):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel:credit")]
        ])
    )
    await state.set_state(OpenStates.waiting_for_credit_period)


@router.message(OpenStates.waiting_for_credit_period)
async def handle_credit_period_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Ä–æ–∫–∞ –∫—Ä–µ–¥–∏—Ç–∞"""
    try:
        period = int(message.text)
        if period <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ä–æ–∫. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–µ–≤:")
        return

    token = api.try_get_token(message.chat.id)
    if not token:
        await message.answer("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
        return

    data = await state.get_data()

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—á–µ—Ç –∫—Ä–µ–¥–∏—Ç–∞
        calculation = await api.calculate_credit_offer(
            token=token,
            product_id=data["product_id"],
            amount=data["amount"],
            period=period
        )

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
        accounts = await api.get_accounts(token)
        rub_accounts = [acc for acc in accounts if acc.currency_number == 643 and acc.status == "ACTIVE"]

        if not rub_accounts:
            await message.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä—É–±–ª–µ–≤—ã—Ö —Å—á–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="list:credit")]]
                )
            )
            return

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=f"{acc.account_number}",
                callback_data=f"select_credit_account:{acc.id}"
            )] for acc in rub_accounts
        ])

        await state.update_data(
            period=period,
            calculation=calculation
        )

        await message.answer(
            f"üíµ –£—Å–ª–æ–≤–∏—è –∫—Ä–µ–¥–∏—Ç–∞:\n"
            f"–°—É–º–º–∞: {data['amount']:.2f} ‚ÇΩ\n"
            f"–°—Ä–æ–∫: {period} –º–µ—Å.\n"
            f"–°—Ç–∞–≤–∫–∞: {calculation['rate']}%\n"
            f"–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {calculation['monthPayment']:.2f} ‚ÇΩ\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤:",
            reply_markup=keyboard
        )
        await state.set_state(OpenStates.waiting_for_credit_account)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∫—Ä–µ–¥–∏—Ç–∞: {str(e)}")


@router.callback_query(F.data.startswith("select_credit_account:"), OpenStates.waiting_for_credit_account)
async def handle_credit_account_selection(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—á–µ—Ç–∞ –¥–ª—è –∫—Ä–µ–¥–∏—Ç–∞"""
    account_id = call.data.split(":")[1]

    token = api.try_get_token(call.message.chat.id)
    if not token:
        await call.answer("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
        return

    data = await state.get_data()

    try:
        credit = await api.open_credit(
            token=token,
            account_id=account_id,
            product_id=data["product_id"],
            amount=data["amount"],
            period=data["period"]
        )

        await call.message.edit_text(
            f"‚úÖ –ö—Ä–µ–¥–∏—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n"
            f"–ù–æ–º–µ—Ä: {credit.number}\n"
            f"–°—É–º–º–∞: {data['amount']:.2f} ‚ÇΩ\n"
            f"–°—Ä–æ–∫: {data['period']} –º–µ—Å.\n"
            f"–°—Ç–∞–≤–∫–∞: {data['calculation']['rate']}%\n"
            f"–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {data['calculation']['monthPayment']:.2f} ‚ÇΩ",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚Üê –ö —Å–ø–∏—Å–∫—É –∫—Ä–µ–¥–∏—Ç–æ–≤", callback_data="list:credit")]]
            )
        )
        await state.clear()
    except Exception as e:
        await call.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–∞: {str(e)}")

